// Функции

// Функции являются основными «строительными блоками» программы.

// Объявление функции
//
// function showMessage() {
//   alert( 'Всем привет!' );
// }
//
// Вначале идёт ключевое слово function, после него имя функции,
// затем список параметров в круглых скобках через запятую (в вышеприведённом примере он пустой) и,
// наконец, код функции, также называемый «телом функции», внутри фигурных скобок.
//
// function имя(параметры) {
//  ...тело...
// }
//
// Новая функция может быть вызвана по своему имени: showMessage().

// Локальные переменные
// Переменные, объявленные внутри функции, видны только внутри этой функции.

// Внешние переменные
// У функции есть доступ к внешним переменным.
// Функция обладает полным доступом к внешним переменным и может изменять их значение. 
// Внешняя переменная используется, только если внутри функции нет такой локальной.
// Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю. 

// Глобальные переменные
// Переменные, объявленные снаружи всех функций, – называются глобальными.
// Глобальные переменные видимы для любой функции (если только их не перекрывают одноимённые локальные переменные).
// Желательно сводить использование глобальных переменных к минимуму. 
// В современном коде обычно мало или совсем нет глобальных переменных.
// Хотя они иногда полезны для хранения важнейших «общепроектовых» данных.

// Параметры
//
// Мы можем передать внутрь функции любую информацию, используя параметры.
//
// function showMessage(from, text) { // параметры: from, text
//   alert(from + ': ' + text);
// }
//
// showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
// showMessage('Аня', "Как дела?"); // Аня: Как дела? (**) 
//
// Когда функция вызывается в строках (*) и (**), переданные значения копируются в локальные переменные from и text. 
// Затем они используются в теле функции.
// Изменение не видно снаружи. Функция всегда получает только копию значения!
//
// function showMessage(from, text) {
//  from = '*' + from + '*'; // немного украсим "from"
//  alert( from + ': ' + text );
// }
// let from = "Аня";
// showMessage(from, "Привет"); // *Аня*: Привет
// значение "from" осталось прежним, функция изменила значение локальной переменной
// alert( from ); // Аня

// Значение, передаваемое в качестве параметра функции, также называется аргументом.
// Параметр – это переменная, указанная в круглых скобках в объявлении функции.
// Аргумент – это значение, которое передаётся функции при её вызове.
// Мы объявляем функции со списком параметров, затем вызываем их, передавая аргументы.

// Значения по умолчанию
// Если при вызове функции аргумент не был указан, то его значением становится undefined.
// Если мы хотим задать параметру  значение по умолчанию, мы должны указать его после =:
// 
// function showMessage(from, text = "текст не добавлен") {
//  alert( from + ": " + text );
// }
// showMessage("Аня"); // Аня: текст не добавлен
//
// function showMessage(from, text = anotherFunction()) {
//  anotherFunction() выполнится только если не передан text
//  результатом будет значение text
// }

// Вычисление параметров по умолчанию
// В JavaScript параметры по умолчанию вычисляются каждый раз, 
// когда функция вызывается без соответствующего параметра.
// В приведённом выше примере, функция anotherFunction() не будет вызвана вообще, если указан параметр text.
// С другой стороны, функция будет независимо вызываться каждый раз, когда text отсутствует.

// function showMessage(from, text) {
//  if (text === undefined) {
//    text = 'текст не добавлен';
//  }
//  alert( from + ": " + text );
// }
//
// function showMessage(from, text) {
//   Если значение text ложно, тогда присвоить параметру text значение по умолчанию
//   заметим, что при этом пустая строка text === "" будет также считаться отсутствующим значением
//  text = text || 'текст не добавлен';
//  ...
// }

// Альтернативные параметры по умолчанию
//
// Иногда имеет смысл присваивать значения по умолчанию для параметров не в объявлении функции, 
// а на более позднем этапе.
// Во время выполнения функции мы можем проверить, передан ли параметр, сравнив его с undefined:
//
// function showMessage(text) {
//  ...
//  if (text === undefined) { // если параметр отсутствует
//    text = 'пустое сообщение';
//  }
//  alert(text);
// }
// showMessage(); // пустое сообщение
//
// function showMessage(text) {
//  если значение text ложно или равняется undefined, тогда присвоить text значение 'пусто'
//  text = text || 'пусто';
//  ...
// }

// Современные движки JavaScript поддерживают оператор нулевого слияния ??.
// Его использование будет лучшей практикой,
// в случае, если большинство ложных значений, таких как 0, следует расценивать как «нормальные».
//
// function showCount(count) {
//   если count равен undefined или null, показать "неизвестно"
//   alert(count ?? "неизвестно");
// }
// showCount(0); // 0
// showCount(null); // неизвестно
// showCount(); // неизвестно

// Возврат значения
// Функция может вернуть результат, который будет передан в вызвавший её код.
//
// function sum(a, b) {
//  return a + b;
// }
// let result = sum(1, 2);
// alert( result ); // 3
//
// Директива return может находиться в любом месте тела функции.
// Как только выполнение доходит до этого места, функция останавливается, 
// и значение возвращается в вызвавший её код (присваивается переменной result выше).
//
// Вызовов return может быть несколько, например:
//
// function checkAge(age) {
//  if (age >= 18) {
//    return true;
//  } else {
//    return confirm('А родители разрешили?');
//  }
// }
//
// let age = prompt('Сколько вам лет?', 18);
// if ( checkAge(age) ) {
//  alert( 'Доступ получен' );
// } else {
//  alert( 'Доступ закрыт' );
// }
//
// Возможно использовать return и без значения. Это приведёт к немедленному выходу из функции.
//
// function showMovie(age) {
//  if ( !checkAge(age) ) {
//    return;
//  }
//  alert( "Вам показывается кино" ); // (*)
//  ...
// }
//
// В коде выше, если checkAge(age) вернёт false, showMovie не выполнит alert.

// Результат функции с пустым return или без него – undefined
// Если функция не возвращает значения, это всё равно, как если бы она возвращала undefined
//
// function doNothing() { /* пусто */ }
// alert( doNothing() === undefined ); // true
// 
// Пустой return аналогичен return undefined
//
// function doNothing() {
//  return;
// }
// alert( doNothing() === undefined ); // true

// Никогда не добавляйте перевод строки между return и его значением
//
// Если мы хотим, чтобы возвращаемое выражение занимало несколько строк, 
// нужно начать его на той же строке, что и return.
// Или, хотя бы, поставить там открывающую скобку, вот так:
//
// return (
//  some + long + expression
//  + or +
//  whatever * f(a) + f(b)
//  )
// 
// И тогда всё сработает, как задумано.

// Выбор имени функции
//
// Функция – это действие. Поэтому имя функции обычно является глаголом.
// Оно должно быть кратким, точным и описывать действие функции,
// чтобы программист, который будет читать код, получил верное представление о том, что делает функция.
//
// Как правило, используются глагольные префиксы,
// обозначающие общий характер действия, после которых следует уточнение.
// Обычно в командах разработчиков действуют соглашения, касающиеся значений этих префиксов.
//
// Например, функции, начинающиеся с "show" обычно что-то показывают.
// "get…" – возвращают значение,
// "calc…" – что-то вычисляют,
// "create…" – что-то создают,
// "check…" – что-то проверяют и возвращают логическое значение, и т.д.

// Одна функция – одно действие
// Функция должна делать только то, что явно подразумевается её названием. 
// И это должно быть одним действием.